When you write Ruby programs, your main activities are creating objects, endowing them with abilities, and asking them to perform actions.

Classes are way to bundle and label behavior.

Nil has a boolean value of false.

Every object is born with innate abiltiies.

## Diffrence between generic and basic object 
	1. BasicObject is a proto-object that only has seven methods, only so it can exist and be identifiable. 

## When passing parameters to methods if you put an asterik before the argument then you can pass an array or unlimited number of arguments. But if you assign a parameter to a given value and don't overwrite it when you call the method, then it takes that given default value.

## Sponge arguments. When passing spone arguments to methods they're treated like the hated child and get lowest priority. If you include a sponge requirement and a required parameter after it, then the required takes precedence. So the required parameter would take the last thing passed to it while the sponge requirements would only take what's in the middle. So if I had something like 
	def school(teacher, *all, pencils)
		puts "Ms. #{teacher} is the greatest. #{all} she does with the #{pencils} is cool"
	end 

	object.school("johnson", "lunch", "uniform", "pens")

	The *all would take in lunch and uniform, but pens would be passed to the pencils param.

## Referencing darling: 
1. When assigning values to variables, you're really only assigning referencs to that object in memory, which is how something like bar
	foo = "bar"
	bar = foo 
can have the value of "bar". The string object is not being stored in the variable, ONLY the reference to it.	However, this isn't true for integers, symbols, and true, false, or nill. They are usually stored in the object and are unreferenced. They are known as immediate values.
2. Another cool thing about using the dup, freeze, and clone methods. Cloning is like dup except that if you clone a frozen object it'll remain frozen, while a duped one will not.
3. Also, you can't "unfreeze" a frozen object. It'll remain frozen forever. 
3. The new method is a constructor whose purpose is manufacture and return to you a new instance of that class.

##A bad Ruby things you can do 
1. So usually we unify the same methods within a given class and never really re-open a class and throw in new methods, but in rare cases you can do it. It's not advised, but it can be done. For example if you go into irb and create an instance of the time class, then call xmlschema on it, you'll get an error because this method is within Ruby's own file called "time.rb" and is not loaded in irb. But, if you require "time", then you'll have access to the method and can then call it on the time instance. 
